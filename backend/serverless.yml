service: lgtmgen-backend
frameworkVersion: "3"

custom:
  prefix: lgtmgen-${self:provider.stage}
  categorizeScheduleEnabled:
    dev: false
    prd: true

provider:
  name: aws
  region: us-east-1
  stage: ${opt:stage, "dev"}
  apiName: ${self:custom.prefix}
  ecr:
    images:
      api:
        path: ./
        file: ./dockerfiles/api/Dockerfile
        buildArgs:
          BASE_IMAGE: ${aws:accountId}.dkr.ecr.${self:provider.region}.amazonaws.com/lgtmgen-${self:provider.stage}-api-base
        cacheFrom:
          - ${aws:accountId}.dkr.ecr.${self:provider.region}.amazonaws.com/serverless-lgtmgen-backend-${self:provider.stage}:api
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::Join:
                - ":"
                - - arn:aws:dynamodb
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - table/${self:custom.prefix}-*
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-images
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-images
                  - /*
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-original-images
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-original-images
                  - /*
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-categorized-keys
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-categorized-keys
                  - /*
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-news
            - Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - ${self:custom.prefix}-news
                  - /*
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            Fn::Join:
              - ":"
              - - arn:aws:sqs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.prefix}-*

  environment:
    STAGE: ${self:provider.stage}
    FRONTEND_ORIGIN: ${env:FRONTEND_ORIGIN}
    IMAGES_BASE_URL: ${env:IMAGES_BASE_URL}
    # Sentry
    SENTRY_DSN: ${env:SENTRY_DSN}
    # Google
    GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    SEARCH_ENGINE_ID: ${env:SEARCH_ENGINE_ID}
    # Azure
    AZURE_API_KEY: ${env:AZURE_API_KEY}
    AZURE_ENDPOINT: ${env:AZURE_ENDPOINT}
    # Slack
    SLACK_OAUTH_TOKEN: ${env:SLACK_OAUTH_TOKEN}
    # SQS Queue
    SQS_QUEUE_URL_NOTIFICATIONS: https://sqs.${aws:region}.amazonaws.com/${aws:accountId}/${self:custom.prefix}-notifications

package:
  individually: true

functions:
  api:
    image:
      name: api
      command: [serve, --lambda]
    timeout: 30 # s
    memorySize: 4096 # MB
    events:
      - http:
          method: ANY
          path: "/{any+}"
  categorize:
    image:
      name: api
      command: [categorize, --lambda]
    timeout: 30
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: ${self:custom.categorizeScheduleEnabled.${self:provider.stage}}
  delete:
    image:
      name: api
      command: [delete]
    timeout: 30 # s
  notify:
    image:
      name: api
      command: [notify, --lambda]
    timeout: 30 # s
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - NotificationsQueue
              - Arn

resources:
  Resources:
    LgtmsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-lgtms
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: created_at
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_status
            KeySchema:
              - AttributeName: status
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    LgtmsCategoriesJaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-lgtms-categories-ja
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: category
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: category
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_category
            KeySchema:
              - AttributeName: category
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    LgtmsCategoriesEnTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-lgtms-categories-en
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: category
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: category
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_category
            KeySchema:
              - AttributeName: category
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-categories
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: lang
            AttributeType: S
          - AttributeName: count
            AttributeType: N
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: lang
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: index_by_lang
            KeySchema:
              - AttributeName: lang
                KeyType: HASH
              - AttributeName: count
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    ReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-reports
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    RatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.prefix}-rates
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: ip
            AttributeType: S
          - AttributeName: tier
            AttributeType: S
        KeySchema:
          - AttributeName: ip
            KeyType: HASH
          - AttributeName: tier
            KeyType: RANGE
    NotificationsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.prefix}-notifications
